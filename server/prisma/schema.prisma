generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  NOT_STARTED
  FIRST_PERIOD
  SECOND_PERIOD
  PAUSED
  BREAK
  FINISHED
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Comment   Comment[]
}

model Player {
  id             Int      @id @default(autoincrement())
  name           String
  number         Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  games          Game[]
  ScorerEvents   Event[]  @relation(name: "scorer")
  AssisterEvents Event[]  @relation(name: "assister")
}

model Game {
  id           Int       @id @default(autoincrement())
  homeTeam     String
  guestTeam    String
  homeScore    Int
  guestScore   Int
  homeTeamKey  String
  guestTeamKey String
  history      Event[]
  comments     Comment[]
  date         DateTime
  status       Status
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  players      Player[]
}

model Event {
  id                Int           @id @default(autoincrement())
  type              GameEventType
  time              DateTime
  teamIndex         Int?
  scorerPlayer      Player?       @relation(fields: [scorerPlayerId], references: [id], name: "scorer")
  scorerPlayerId    Int?
  assistingPlayer   Player?       @relation(fields: [assistingPlayerId], references: [id], name: "assister")
  assistingPlayerId Int?
  game              Game          @relation(fields: [gameId], references: [id])
  gameId            Int
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Game      Game?    @relation(fields: [gameId], references: [id])
  gameId    Int?
}

enum GameEventType {
  GOAL
  PENALTY // bad
  PENALTY_KICK // good
  BREAK
  PAUSE
  FIRST_PERIOD
  SECOND_PERIOD
  FINISH
}
